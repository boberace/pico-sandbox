.program pin_watch
; the code must be loaded at address 0, because it uses computed jumps
.origin 0


; computed jumps: 
begin:
    JMP sample          ; 0b00 (0) previous 0 current 0 - no pin change
    JMP rise            ; 0b01 (1) previous 0 current 1 - pin rise 
    JMP fall            ; 0b10 (2) previous 1 current 0 - pin fall
    JMP sample          ; 0b11 (3) previous 1 current 1 - no pin change

rise:
;    set pins 0 
    JMP begin ; go back to begining

fall:
    set pins 1 [31]
    nop [31]
    nop [31]
    nop [31]
    nop [31]

    set pins 0
    JMP begin ; go back to begining

sample:
    OUT ISR, 1    ; shift previous state of input pin stored in OSR to ISR 
    IN PINS, 1    ; shift in current state of input pin into ISR next to previous state of input pin    
    MOV OSR, ISR  ; copy the ISR to OSR so that we can get the current value as previous value next cycle
    MOV PC, ISR   ; go to jmp address